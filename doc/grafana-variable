Templates and variables--https://grafana.com/docs/grafana/latest/variables/

A variable is a placeholder for a value. You can use variables in metric queries and in panel titles. So when you change the value, using the dropdown at the top of the dashboard, your panelâ€™s metric queries will change to reflect the new value.

Variables allow you to create more interactive and dynamic dashboards. Instead of hard-coding things like server, application, and sensor names in your metric queries, you can use variables in their place. Variables are displayed as dropdown lists at the top of the dashboard. These dropdowns make it easy to change the data being displayed in your dashboard. 


Variable syntax--https://grafana.com/docs/grafana/latest/variables/syntax/

Panel titles and metric queries can refer to variables using two different syntaxes:

    $varname This syntax is easy to read, but it does not allow you to use a variable in the middle of a word. Example: apps.frontend.$server.requests.count
    ${var_name} Use this syntax when you want to interpolate a variable in the middle of an expression.
    ${var_name:<format>} This format gives you more control over how Grafana interpolates values. Refer to Advanced variable format options for more detail on all the formatting types.
    [[varname]] Do not use. Deprecated old syntax, will be removed in a future release.

Before queries are sent to your data source the query is interpolated, meaning the variable is replaced with its current value. During interpolation, the variable value might be escaped in order to conform to the syntax of the query language and where it is used. For example, a variable used in a regex expression in an InfluxDB or Prometheus query will be regex escaped. Read the data source specific documentation topic for details on value escaping during interpolation.


Variable examples--https://grafana.com/docs/grafana/latest/variables/variable-examples/

This page contains links to dashboards in Grafana Play with examples of template variables.

    Elasticsearch Metrics - Uses ad hoc filters, global variables, and a custom variable.
    Graphite Templated Nested - Uses query variables, chained query variables, an interval variable, and a repeated panel.
    Influx DB Group By Variable - Query variable, panel uses the variable results to group the metric data.
    InfluxDB Raw Query Template Var - Uses query variables, chained query variables, and an interval variable.
    InfluxDB Server Monitoring - Uses query variables, chained query variables, an interval variable, and an ad hoc filter.
    Prometheus templating - Uses chained query variables.
    Template Redux - Uses query variables, chained query variables, ad hoc filters, an interval variable, a text box variable, a custom variable, and a data source variable.
    Templating, repeated panels - Two sets of repeated panels use query variables.
    Templating showcase - Uses custom, query, chained query, and data source variables.
    Templating value groups - Uses query variable with value groups.
    
    
    
Advanced variable format options--https://grafana.com/docs/grafana/latest/variables/advanced-variable-format-options/

The formatting of the variable interpolation depends on the data source, but there are some situations where you might want to change the default formatting.

For example, the default for the MySql data source is to join multiple values as comma-separated with quotes: 'server01','server02'. In some cases, you might want to have a comma-separated string without quotes: server01,server02. You can make that happen with advanced variable formatting options listed below.
General syntax

Syntax: ${var_name:option}

Test the formatting options on the Grafana Play site.

If any invalid formatting option is specified, then glob is the default/fallback option.

An alternative syntax (that might be deprecated in the future) is [[var_name:option]].
CSV

Formats variables with multiple values as a comma-separated string.

servers = ['test1', 'test2']
String to interpolate: '${servers:csv}'
Interpolation result: 'test1,test2'

Distributed - OpenTSDB

Formats variables with multiple values in custom format for OpenTSDB.

servers = ['test1', 'test2']
String to interpolate: '${servers:distributed}'
Interpolation result: 'test1,servers=test2'

Doublequote

Formats single- and multi-valued variables into a comma-separated string, escapes " in each value by \" and quotes each value with ".

servers = ['test1', 'test2']
String to interpolate: '${servers:doublequote}'
Interpolation result: '"test1","test2"'

Glob - Graphite

Formats variables with multiple values into a glob (for Graphite queries).

servers = ['test1', 'test2']
String to interpolate: '${servers:glob}'
Interpolation result: '{test1,test2}'

JSON

Formats variables with multiple values as a comma-separated string.

servers = ['test1', 'test2']
String to interpolate: '${servers:json}'
Interpolation result: '["test1", "test2"]'

Lucene - Elasticsearch

Formats variables with multiple values in Lucene format for Elasticsearch.

servers = ['test1', 'test2']
String to interpolate: '${servers:lucene}'
Interpolation result: '("test1" OR "test2")'

Percentencode

Formats single and multi valued variables for use in URL parameters.

servers = ['foo()bar BAZ', 'test2']
String to interpolate: '${servers:percentencode}'
Interpolation result: 'foo%28%29bar%20BAZ%2Ctest2'

Pipe

Formats variables with multiple values into a pipe-separated string.

servers = ['test1.', 'test2']
String to interpolate: '${servers:pipe}'
Interpolation result: 'test1.|test2'

Raw

Turns off data source-specific formatting, such as single quotes in an SQL query.

servers = ['test.1', 'test2']
String to interpolate: '${var_name:raw}'
Interpolation result: 'test.1,test2'

Regex

Formats variables with multiple values into a regex string.

servers = ['test1.', 'test2']
String to interpolate: '${servers:regex}'
Interpolation result: '(test1\.|test2)'

Singlequote

Formats single- and multi-valued variables into a comma-separated string, escapes ' in each value by \' and quotes each value with '.

servers = ['test1', 'test2']
String to interpolate: '${servers:singlequote}'
Interpolation result: "'test1','test2'"

Sqlstring

Formats single- and multi-valued variables into a comma-separated string, escapes ' in each value by '' and quotes each value with '.

servers = ["test'1", "test2"]
String to interpolate: '${servers:sqlstring}'
Interpolation result: "'test''1','test2'"

Text

Formats single- and multi-valued variables into their text representation. For a single variable it will just return the text representation. For multi-valued variables it will return the text representation combined with +.

servers = ["test1", "test2"]
String to interpolate: '${servers:text}'
Interpolation result: "test1 + test2"

Query parameters

Formats single- and multi-valued variables into their query parameter representation. Example: var-foo=value1&var-foo=value2

servers = ["test1", "test2"]
String to interpolate: '${servers:queryparam}'
Interpolation result: "var-servers=test1&var-servers=test2"


